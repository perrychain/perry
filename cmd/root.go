package cmd

import (
	"errors"
	"fmt"
	"os"
	"os/user"

	cc "github.com/ivanpirog/coloredcobra"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

var PerryHeader = `
@@@@@@@PYB&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@B???JY5PPPGGGGGGGBBB##&&@@@@@@@@@@
@@@@@@G?????????????????????JJY5G#@@@@@@
@@@@@@&Y????????5PYJ??????????????YG@@@@
@@@@@@@@B5J????J@@@&##BBBBBPY???????5&@@
@@5YYY5PGBBBBGPP@@@@@@@@@@@@@GJ??????5@@
@@J????????JY5G#@@@@@@@@@@@@@@&GY?????#@
@@Y?????????????JP#@@@@@@@@@&&@@#?????B@
@@5????????????????YG&@@@@PJJJ5B5?????#@
@@B??????????????????JG@@#???????????P@@
@@@Y???????????????????Y#@B5J?????J5B@@@
@@@&J?????J??????????????P@@&#####&@@@@@
@@@@&Y????JY???????J??????JB@@@@@@@@@@@@
@@@@@@BY???P5??????JY???????Y#@@@@@@@@@@
@@@@@@@@#G5Y&5??????Y5J???????P&@@@@@@@@
@@@@@@@@@@@@@@GJ?????YBY???????JG@@@@@@@
@@@@@@@@@@@@@@@&GY????Y&GJ???????YB@@@@@
@@@@@@@@@@@@@@@@@@&BGP5G@@B5J??????YB@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@&B5YJJ???P&@
`

var PerryVersion = "0.1"
var PerryTag = fmt.Sprintf("Perry - Blockchain messaging service version (%s)", PerryVersion)

const walletLocation = "wallet"
const dbLocation = "db"

var rootCmd = &cobra.Command{
	Use:   "perry",
	Short: PerryTag,
	Long:  fmt.Sprintf("%s\n%s", PerryHeader, PerryTag),
}

func Execute() {

	cc.Init(&cc.Config{
		RootCmd:  rootCmd,
		Headings: cc.HiBlue + cc.Bold + cc.Underline,
		Commands: cc.HiYellow + cc.Bold,
		Example:  cc.Italic,
		ExecName: cc.Bold,
		Flags:    cc.Green + cc.Bold,
	})

	err := rootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
}

func init() {

	usr, _ := user.Current()
	defaultHomeDir := fmt.Sprintf("%s/.perry", usr.HomeDir)
	createDefaultPerryDir(defaultHomeDir)
	defaultPath := fmt.Sprintf("%s/.wallet.json", defaultHomeDir)

	rootCmd.PersistentFlags().StringP(walletLocation, "w", defaultPath, "Wallet filename")

	defaultDbDir := fmt.Sprintf("%s/.perry/blockchain-db.json", usr.HomeDir)
	rootCmd.PersistentFlags().StringP(dbLocation, "d", defaultDbDir, "Filename for blockchain DB")

}

func createDefaultPerryDir(path string) {
	if _, err := os.Stat(path); errors.Is(err, os.ErrNotExist) {
		err := os.Mkdir(path, os.ModePerm)
		if err != nil {
			log.Println(err)
		}
	}
}
